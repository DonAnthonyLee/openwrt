diff -Nur a/drivers/staging/Kconfig b/drivers/staging/Kconfig
--- a/drivers/staging/Kconfig	2018-11-01 21:25:48.377666181 +0800
+++ b/drivers/staging/Kconfig	2018-11-01 21:25:26.006023412 +0800
@@ -118,4 +118,6 @@
 
 source "drivers/staging/pi433/Kconfig"
 
+source "drivers/staging/lbk_panel/Kconfig"
+
 endif # STAGING
diff -Nur a/drivers/staging/Makefile b/drivers/staging/Makefile
--- a/drivers/staging/Makefile	2018-11-01 20:55:38.680349424 +0800
+++ b/drivers/staging/Makefile	2018-11-01 20:56:00.227368463 +0800
@@ -50,3 +50,4 @@
 obj-$(CONFIG_CRYPTO_DEV_CCREE)	+= ccree/
 obj-$(CONFIG_DRM_VBOXVIDEO)	+= vboxvideo/
 obj-$(CONFIG_PI433)		+= pi433/
+obj-y				+= lbk_panel/
diff -Nur a/drivers/staging/lbk_panel/Kconfig b/drivers/staging/lbk_panel/Kconfig
--- a/drivers/staging/lbk_panel/Kconfig	1970-01-01 08:00:00.000000000 +0800
+++ b/drivers/staging/lbk_panel/Kconfig	2018-12-17 14:40:09.821586133 +0800
@@ -0,0 +1,15 @@
+config LBK_FONTS
+	tristate "Fonts stuff for LBKit"
+	default n
+
+config OLED_SSD1306_I2C
+	tristate "OLED SSD1306 I2C"
+	depends on I2C
+	select OF_RESERVED_MEM
+	default n
+
+config LCD_ST7735S
+	tristate "LCD ST7735S"
+	depends on SPI
+	select OF_RESERVED_MEM
+	default n
diff -Nur a/drivers/staging/lbk_panel/Makefile b/drivers/staging/lbk_panel/Makefile
--- a/drivers/staging/lbk_panel/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/drivers/staging/lbk_panel/Makefile	2018-12-17 14:41:55.497091426 +0800
@@ -0,0 +1,8 @@
+ifeq ($(CONFIG_OLED_SSD1306_I2C),m)
+obj-y					+= system_memblock.o
+else
+ifeq ($(CONFIG_LCD_ST7735S),m)
+obj-y					+= system_memblock.o
+endif
+endif
+
diff -Nur a/drivers/staging/lbk_panel/system_memblock.c b/drivers/staging/lbk_panel/system_memblock.c
--- a/drivers/staging/lbk_panel/system_memblock.c	1970-01-01 08:00:00.000000000 +0800
+++ b/drivers/staging/lbk_panel/system_memblock.c	2018-12-17 21:40:34.740142376 +0800
@@ -0,0 +1,106 @@
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/of_device.h>
+#include <linux/of_graph.h>
+#include <linux/of_address.h>
+#include <linux/mm.h>
+#include <linux/vmalloc.h>
+#include <linux/memblock.h>
+
+int system_reserved_memblock_get_by_node(struct device_node *node, phys_addr_t *pbase, phys_addr_t *psize)
+{
+	int err = -ENODEV;
+	struct resource res;
+
+	if (node && pbase && psize) {
+		err = of_address_to_resource(node, 0, &res);
+		if (err == 0) {
+			*pbase = res.start;
+			*psize = resource_size(&res);
+		}
+	}
+
+	return err;
+}
+
+int system_reserved_memblock_get_by_name(const char *name, phys_addr_t *pbase, phys_addr_t *psize)
+{
+	int err = -ENODEV;
+	struct device_node *node;
+
+	if (name && pbase && psize) {
+		node = of_find_node_by_name(NULL, name);
+		if (node) {
+			err = system_reserved_memblock_get_by_node(node, pbase, psize);
+			of_node_put(node);
+		}
+	}
+
+	return err;
+}
+
+int system_reserved_memblock_get(struct device *dev, phys_addr_t *pbase, phys_addr_t *psize)
+{
+	int err = -ENODEV;
+	struct device_node *node;
+
+	if (dev && pbase && psize) {
+		node = of_parse_phandle(dev->of_node, "memory-region", 0);
+		if (node) {
+			err = system_reserved_memblock_get_by_node(node, pbase, psize);
+			of_node_put(node);
+		}
+	}
+
+	return err;
+}
+
+int system_reserved_memblock_cpy(void *dst, phys_addr_t base, phys_addr_t size, size_t n)
+{
+	int npages, i;
+	struct page **pages;
+	void *src;
+	phys_addr_t start = base & PAGE_MASK;
+
+	if (!memblock_is_region_reserved(base, size) || n > size) return -EINVAL;
+
+	npages = PAGE_ALIGN(n + (base - start)) / PAGE_SIZE;
+	pages = kcalloc(npages, sizeof(struct page *), GFP_KERNEL);
+	if (!pages)
+		return -ENOMEM;
+
+	for (i = 0; i < npages; i++)
+		pages[i] = pfn_to_page((start / PAGE_SIZE) + i);
+
+	src = vmap(pages, npages, VM_MAP, PAGE_KERNEL);
+	if (!src) {
+		kfree(pages);
+		return -ENOMEM;
+	}
+
+	memcpy(dst, (uint8_t*)src + (base - start), n);
+
+	kfree(pages);
+	vunmap(src);
+
+	return 0;
+}
+
+void system_reserved_memblock_free(phys_addr_t base, phys_addr_t size)
+{
+	if (memblock_is_region_reserved(base, size)) {
+		memblock_free(base, size);
+		memblock_remove(base, size);
+		free_reserved_area(__va(base),
+				   __va(base + size),
+				   -1, NULL);
+	}
+}
+
+EXPORT_SYMBOL(system_reserved_memblock_get_by_node);
+EXPORT_SYMBOL(system_reserved_memblock_get_by_name);
+EXPORT_SYMBOL(system_reserved_memblock_get);
+EXPORT_SYMBOL(system_reserved_memblock_cpy);
+EXPORT_SYMBOL(system_reserved_memblock_free);
+
diff -Nur a/drivers/staging/lbk_panel/system_memblock.h b/drivers/staging/lbk_panel/system_memblock.h
--- a/drivers/staging/lbk_panel/system_memblock.h	1970-01-01 08:00:00.000000000 +0800
+++ b/drivers/staging/lbk_panel/system_memblock.h	2018-12-17 21:40:35.244129303 +0800
@@ -0,0 +1,16 @@
+#ifndef __SYSTEM_RESERVED_MEMBLOCK_STUFF_H__
+#define __SYSTEM_RESERVED_MEMBLOCK_STUFF_H__
+
+#include <linux/types.h>
+#include <linux/of.h>
+#include <linux/device.h>
+
+int system_reserved_memblock_get_by_node(struct device_node *node, phys_addr_t *pbase, phys_addr_t *psize);
+int system_reserved_memblock_get_by_name(const char *name, phys_addr_t *pbase, phys_addr_t *psize);
+int system_reserved_memblock_get(struct device *dev, phys_addr_t *pbase, phys_addr_t *psize);
+
+int system_reserved_memblock_cpy(void *dst, phys_addr_t base, phys_addr_t size, size_t n);
+void system_reserved_memblock_free(phys_addr_t base, phys_addr_t size);
+
+#endif /* __SYSTEM_RESERVED_MEMBLOCK_STUFF_H__ */
+
